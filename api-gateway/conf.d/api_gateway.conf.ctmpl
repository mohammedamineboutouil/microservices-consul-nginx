include api_keys.conf;

{{range services}} {{$name := .Name}} {{$service := service .Name}}
    upstream {{$name}} {
        zone upstream-{{$name}} 64k;
        least_conn;
        {{range $service}} server {{.Address}}:{{.Port}} max_fails=3 fail_timeout=60 weight=1;
        {{else}} server 127.0.1.1:65535; # force a 502 {{end}}
    }
{{end}}

server {

    listen 8080 default_server;

	location / {
        root /usr/share/nginx/html/;
        index index.html;
    }

    location /stub_status {
        stub_status;
    }

    {{range services}} {{$name := .Name}}
        location /api/{{$name}}/ {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Path $request_uri;
            proxy_set_header X-Forwarded-Base "/{{$name}}/";
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;
            if ($request_uri ~* "/{{$name}}/(.*)") {
                proxy_pass http://{{$name}}/$1;
                rewrite ^/api/{{$name}}/(.*)$ /$1 break;
            }
        }
    {{end}}

    # Error responses
    # error_page 404 = @400;         # Invalid paths are treated as bad requests
    proxy_intercept_errors on;     # Do not send backend errors to the client
    include api_json_errors.conf;  # API client friendly JSON error responses
    default_type application/json; # If no content-type then assume JSON

    # # API key validation
    # location = /_validate_apikey {
    #     internal;

    #     if ($http_apikey = "") {
    #         return 401; # Unauthorized
    #     }
    #     if ($api_client_name = "") {
    #         return 403; # Forbidden
    #     }

    #     return 204; # OK (no content)
    # }
}